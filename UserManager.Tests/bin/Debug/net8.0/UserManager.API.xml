<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UserManager.API</name>
    </assembly>
    <members>
        <member name="T:UserManager.API.Common.Responses.ApiResponse`1">
            <summary>
            Standard response format for API.
            </summary>
            <typeparam name="T">Type of data to return.</typeparam>
        </member>
        <member name="P:UserManager.API.Common.Responses.ApiResponse`1.Success">
            <summary>
            Indicates if the response is success or error.
            </summary>
        </member>
        <member name="P:UserManager.API.Common.Responses.ApiResponse`1.Message">
            <summary>
            Message about the response.
            </summary>
        </member>
        <member name="P:UserManager.API.Common.Responses.ApiResponse`1.Data">
            <summary>
            Data returned (can be null on error).
            </summary>
        </member>
        <member name="M:UserManager.API.Common.Responses.ApiResponse`1.Ok(`0,System.String)">
            <summary>
            Create a success response.
            </summary>
            <param name="data">Data to send.</param>
            <param name="message">Optional message.</param>
            <returns>ApiResponse with success true.</returns>
        </member>
        <member name="M:UserManager.API.Common.Responses.ApiResponse`1.Fail(System.String)">
            <summary>
            Create a fail response.
            </summary>
            <param name="message">Error message.</param>
            <returns>ApiResponse with success false.</returns>
        </member>
        <member name="T:UserManager.API.Controllers.AuthenticationLoginController">
            <summary>
            This controller is for login. People use this to enter to system.
            </summary>
        </member>
        <member name="M:UserManager.API.Controllers.AuthenticationLoginController.#ctor(UserManager.Application.Interfaces.IUserService)">
            <summary>
            Constructor for this controller. Put user service here.
            </summary>
            <param name="userService">Service to work with users.</param>
        </member>
        <member name="M:UserManager.API.Controllers.AuthenticationLoginController.Login(UserManager.Application.DTOS.LoginRequest)">
            <summary>
            This method is for login. You give email and password. It give token if correct.
            </summary>
            <param name="request">This is the login request. It has email and password.</param>
            <returns>If ok, return token and info. If bad, return unauthorized.</returns>
        </member>
        <member name="T:UserManager.API.Controllers.UsersController">
            <summary>
            This controller helps to manage users (create, read, update, delete).
            </summary>
        </member>
        <member name="M:UserManager.API.Controllers.UsersController.#ctor(UserManager.Application.Interfaces.IUserService,Microsoft.Extensions.Logging.ILogger{UserManager.API.Controllers.UsersController})">
            <summary>
            Constructor. Gets services to use in this controller.
            </summary>
            <param name="userService">Service for user actions.</param>
            <param name="logger">Logger to write information in console or file.</param>
        </member>
        <member name="M:UserManager.API.Controllers.UsersController.GetAll">
            <summary>
            Get all users in the system.
            </summary>
            <returns>List of all users.</returns>
        </member>
        <member name="M:UserManager.API.Controllers.UsersController.GetById(System.Int32)">
            <summary>
            Get one user using ID.
            </summary>
            <param name="id">User ID.</param>
            <returns>User with that ID.</returns>
        </member>
        <member name="M:UserManager.API.Controllers.UsersController.Create(UserManager.Application.DTOS.CreateUserRequest)">
            <summary>
            Create a new user.
            </summary>
            <param name="dto">User data to save.</param>
            <returns>The created user.</returns>
        </member>
        <member name="M:UserManager.API.Controllers.UsersController.Update(System.Int32,UserManager.Application.DTOS.UpdateUserRequest)">
            <summary>
            Update a user using ID.
            </summary>
            <param name="id">User ID to update.</param>
            <param name="dto">New data to update.</param>
            <returns>The updated user or error.</returns>
        </member>
        <member name="M:UserManager.API.Controllers.UsersController.Delete(System.Int32)">
            <summary>
            Delete a user using ID.
            </summary>
            <param name="id">User ID to delete.</param>
            <returns>Status of the delete.</returns>
        </member>
        <member name="T:UserManager.API.Middlewares.ExceptionMiddleware">
            <summary>
            Middleware to catch exceptions globally and return a standardized error response.
            </summary>
        </member>
        <member name="M:UserManager.API.Middlewares.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{UserManager.API.Middlewares.ExceptionMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:UserManager.API.Middlewares.ExceptionMiddleware"/> class.
            </summary>
            <param name="next">Next middleware in the pipeline.</param>
            <param name="logger">Logger instance to log errors.</param>
        </member>
        <member name="M:UserManager.API.Middlewares.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to handle the HTTP context.
            </summary>
            <param name="httpContext">HTTP context for the current request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:UserManager.API.Middlewares.ExceptionMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Handles the exception and writes a standardized JSON response.
            </summary>
            <param name="context">HTTP context.</param>
            <param name="exception">The caught exception.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
    </members>
</doc>
